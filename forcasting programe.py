# -*- coding: utf-8 -*-
"""practiece

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HD9sTL9JGvJUc_i1BFrD9XiSwa7JeGdY
"""

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt

# Coca-Cola Prices Data
data = {'Quarter': ['Q1_86', 'Q2_86', 'Q3_86', 'Q4_86', 'Q1_87', 'Q2_87', 'Q3_87', 'Q4_87', 'Q1_88', 'Q2_88',
                    'Q3_88', 'Q4_88', 'Q1_89', 'Q2_89', 'Q3_89', 'Q4_89', 'Q1_90', 'Q2_90', 'Q3_90', 'Q4_90',
                    'Q1_91', 'Q2_91', 'Q3_91', 'Q4_91', 'Q1_92', 'Q2_92', 'Q3_92', 'Q4_92', 'Q1_93', 'Q2_93',
                    'Q3_93', 'Q4_93', 'Q1_94', 'Q2_94', 'Q3_94', 'Q4_94', 'Q1_95', 'Q2_95', 'Q3_95', 'Q4_95',
                    'Q1_96', 'Q2_96'],
        'Sales': [1734.827, 2244.960999, 2533.804993, 2154.962997, 1547.818996, 2104.411995, 2014.362999, 1991.746998,
                  1869.049999, 2313.631996, 2128.32, 2026.828999, 1910.603996, 2331.164993, 2206.549995, 2173.967995,
                  2148.278, 2739.307999, 2792.753998, 2556.009995, 2480.973999, 3039.522995, 3172.115997, 2879.000999,
                  2772, 3550, 3508, 3243.859993, 3056, 3899, 3629, 3373, 3352, 4342, 4461, 4017, 3854, 4936, 4895,
                  4333, 4194, 5253]}

df = pd.DataFrame(data)
df['Quarter'] = pd.to_datetime(df['Quarter'].str.replace('_', ' '), format='%b %y')

# Fit ARIMA Model
model = ARIMA(df['Sales'], order=(5, 1, 0))
fit_model = model.fit()

# Forecast Future Prices
future_steps = 6  # Adjust as needed
forecast = fit_model.get_forecast(steps=future_steps)

# Evaluate Model
mse = mean_squared_error(df['Sales'][-future_steps:], forecast.predicted_mean)
rmse = sqrt(mse)

print(f"Root Mean Squared Error (RMSE) for Coca-Cola Prices: {rmse}")
# Choose this model for forecasting if RMSE is satisfactory.

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
from statsmodels.tsa.statespace.sarimax import SARIMAX

# Airlines Passengers Data
# Assuming you have a dataset with columns 'Quarter' and 'Passengers'
# Create dummy variables for quarters
df_passengers = pd.get_dummies(df_passengers, columns=['Quarter'], drop_first=True)
# Fit SARIMA Model with Dummy Variables
model_passengers = SARIMAX(df_passengers['Passengers'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 4))
fit_model_passengers = model_passengers.fit()
# Forecast Future Passengers
future_steps_passengers = 6  # Adjust as needed
forecast_passengers = fit_model_passengers.get_forecast(steps=future_steps_passengers, exog=df_passengers[['Quarter_Q2', 'Quarter_Q3', 'Quarter_Q4']])

# Evaluate Model
mse_passengers = mean_squared_error(df_passengers['Passengers'][-future_steps_passengers:], forecast_passengers.predicted_mean)
rmse_passengers = sqrt(mse_passengers)

print(f"Root Mean Squared Error (RMSE) for Airlines Passengers: {rmse_passengers}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from math import sqrt
# Replace the data with your actual data
data = {
    'Month': ['Jan-95', 'Feb-95', 'Mar-95', ...],  # Replace with your months
    'Passengers': [112, 118, 132, ...]  # Replace with your passenger numbers
}

df = pd.DataFrame(data)
df['Month'] = pd.to_datetime(df['Month'], format='%b-%y')
df.set_index('Month', inplace=True)
plt.plot(df['Passengers'])
plt.title('Airlines Passengers Over Time')
plt.xlabel('Month')
plt.ylabel('Passengers')
plt.show()
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]
order = (p, d, q)  # Replace p, d, q with optimal values obtained from model tuning
seasonal_order = (P, D, Q, m)  # Replace P, D, Q, m with optimal values

model = SARIMAX(train['Passengers'], order=order, seasonal_order=seasonal_order)
result = model.fit(disp=False)
start = len(train)
end = len(train) + len(test) - 1
predictions = result.predict(start=start, end=end, dynamic=False, typ='levels')
rmse = sqrt(mean_squared_error(test['Passengers'], predictions))
print(f'Root Mean Squared Error (RMSE): {rmse}')